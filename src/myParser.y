%{
    #include <stdlib.h>
    #include <stdio.h>
    extern int yylex(void);
    extern void yyerror(const char *s);
    extern int yywrap(void);
%}

%token IDENTIFIER NUMBER NOT_EQUAL '=' '<' '>' ';' ',' '(' ')' GREATER_OR_EQUAL LESS_OR_EQUAL
%token SINGLE_QUOTE STAR KW_CHAR KW_INT KW_CREATE KW_TABLE KW_DATABASE KW_DATABASES
%token KW_SHOW KW_TABLES KW_USE KW_DROP KW_INSERT KW_INTO KW_VALUES KW_SELECT
%token KW_FROM KW_WHERE KW_AND KW_OR KW_DELETE KW_UPDATE KW_SET EXIT UNKNOWN
%left  OR
%left  AND
%nonassoc '=' '>' '<' NOT_EQUAL GREATER_OR_EQUAL LESS_OR_EQUAL
%nonassoc '(' ')'

%%

statements  :   statement                                                                       {printf("SQL>");}
            |   statements statement                                                            {printf("SQL>");}
            ;

statement   :   create_sql                          
            |   show_sql
            |   use_sql
            |   drop_sql
            |   inser_sql
            |   select_sql
            |   delete_sql
            |   update_sql
            |   _exit
            ;

create_sql  :   KW_CREATE KW_DATABASE IDENTIFIER ';'                                            {printf("识别到create database语句\n");}
            |   KW_CREATE KW_TABLE IDENTIFIER '(' entries ')' ';'                               {printf("识别到create table语句\n");}
            ; 

entries     :   entry
            |   entries ',' entry
            ;

entry       :   IDENTIFIER KW_CHAR '(' NUMBER ')'
            |   IDENTIFIER KW_INT
            ;

show_sql    :   KW_SHOW KW_DATABASES ';'                                                        {printf("识别到show databases语句\n");}
            |   KW_SHOW KW_TABLES ';'                                                           {printf("识别到show tables语句\n");}
            ;

use_sql     :   KW_USE KW_DATABASE IDENTIFIER ';'                                               {printf("识别到use database语句\n");}

drop_sql    :   KW_DROP KW_DATABASE IDENTIFIER ';'                                              {printf("识别到drop database语句\n");}
            |   KW_DROP KW_TABLE IDENTIFIER ';'                                                 {printf("识别到drop table语句\n");}
            ;

inser_sql   :   KW_INSERT KW_INTO IDENTIFIER '(' columns ')' KW_VALUES '(' values ')' ';'       {printf("识别到insert语句\n");}
            |   KW_INSERT KW_INTO IDENTIFIER KW_VALUES '(' values ')' ';'                       {printf("识别到insert语句\n");}
            ;

columns     :   IDENTIFIER
            |   columns ',' IDENTIFIER
            ;

values      :   value
            |   values ',' value
            ;

value       :   SINGLE_QUOTE IDENTIFIER SINGLE_QUOTE
            |   NUMBER
            ;

select_sql  :   KW_SELECT STAR KW_FROM tables where_clause ';'                                  {printf("识别到select语句\n");}
            |   KW_SELECT columns KW_FROM tables where_clause ';'                               {printf("识别到select语句\n");}
            ;

delete_sql  :   KW_DELETE KW_FROM IDENTIFIER where_clause ';'                                   {printf("识别到delete语句\n");};

update_sql  :   KW_UPDATE IDENTIFIER KW_SET results where_clause ';'                            {printf("识别到update语句\n");};

tables      :   IDENTIFIER
            |   tables ',' IDENTIFIER
            ;

results     :   result
            |   results ',' result
            ;

result      :   IDENTIFIER '=' SINGLE_QUOTE IDENTIFIER SINGLE_QUOTE
            |   IDENTIFIER '=' NUMBER
            ;

where_clause:
            |   KW_WHERE conditions
            ;

/******************Grammar1: generated by deepseek******************/
// conditions  :   logical_and_conditions
//             |   conditions KW_OR logical_and_conditions
//             ;

// logical_and_conditions  
//             :   logical_and_conditions KW_AND primary_condition
//             |   primary_condition
//             ;

// primary_condition   
//             :   '(' conditions ')'
//             |   condition
//             ;
/*******************************************************************/

/*********************Grammar2: wrote by myself*********************/
conditions  :   conditions KW_AND base_conditions
            |   conditions KW_OR base_conditions
            |   base_conditions
            ;

base_conditions 
            :   '(' conditions ')'
            |   condition
            ;
/*******************************************************************/

/*******************************Notes*******************************/
//Deepseek:
//文法1通过规则分层显式表达优先级逻辑，更符合直觉，减少对优先级声明的依赖;
//文法2依赖优先级声明，规则本身较为扁平，可读性和扩展性较弱
/*******************************************************************/

condition   :   IDENTIFIER '=' NUMBER
            |   IDENTIFIER '=' SINGLE_QUOTE IDENTIFIER SINGLE_QUOTE
            |   IDENTIFIER '>' NUMBER
            |   IDENTIFIER '<' NUMBER
            |   IDENTIFIER NOT_EQUAL NUMBER
            |   IDENTIFIER NOT_EQUAL SINGLE_QUOTE IDENTIFIER SINGLE_QUOTE
            |   IDENTIFIER LESS_OR_EQUAL NUMBER
            |   IDENTIFIER GREATER_OR_EQUAL NUMBER
            ;

_exit       :   EXIT                                                                            {printf("识别到exit语句\n");return 0;};

%%

int main(){
    printf("SQL>");
    fflush(stdout);
    yyparse();
    return 0;
}

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}
